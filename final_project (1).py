# -*- coding: utf-8 -*-
"""Final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykjFP_tUrb3vv-poDNZJvO74Ym80iLIU

#                                               Customer Segmentation Analysis

#### Objective: To perform customer segmentation using unsupervised learning techniques on a retail dataset and provide insights for targeted marketing strategies.

#### Data: We will use the "Online Retail" dataset from the UCI Machine Learning Repository.

## Importing the needed libraries and modules
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import seaborn as sns

"""## Data Loading and Exploration"""

# Load the dataset
url = "http://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx"
df = pd.read_excel(url)

# Displaying the columns' data types
print(df.info())

# Display the first five rows in the dataset
print(df.head())

"""## Data Preprocessing"""

# Remove missing values and unnecessary columns
df_cleaned = df.dropna()
df_cleaned = df_cleaned[df_cleaned['Quantity'] > 0]

# Convert 'InvoiceDate' to datetime
df_cleaned['InvoiceDate'] = pd.to_datetime(df_cleaned['InvoiceDate'])

"""### Data exploration: Visualization"""

# Distribution of Quantity
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Quantity', bins=30)
plt.title('Distribution of Quantity')
plt.xlabel('Quantity')
plt.ylabel('Frequency')
plt.show()

# Distribution of UnitPrice
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='UnitPrice', bins=25)
plt.title('Distribution of Unit Price')
plt.xlabel('Unit Price')
plt.ylabel('Frequency')
plt.show()

# Top 10 countries by transaction count
plt.figure(figsize=(10, 6))
top_countries = df['Country'].value_counts().head(10)
sns.barplot(x=top_countries.index, y=top_countries.values)
plt.title('Top 10 Countries by Transaction Count')
plt.xlabel('Country')
plt.ylabel('Transaction Count')
plt.xticks(rotation=45)
plt.show()

"""##### Feature engineering

"""

df_cleaned['TotalAmount'] = df_cleaned['Quantity'] * df_cleaned['UnitPrice']

"""##### Encoding the categorical features

"""

df_encoded = pd.get_dummies(df_cleaned, columns=['StockCode', 'Country'], drop_first=True)

"""##### Aggregating the data by CustomerID

"""

agg_functions = {'TotalAmount': 'sum', 'InvoiceNo': 'nunique'}
df_grouped = df_encoded.groupby('CustomerID').agg(agg_functions).reset_index()

"""## Standardization and PCA

#### Separating the features and the target variable
"""

X = df_grouped.drop(columns=['CustomerID'])

"""#### Standardizing the features **before** perfroming the PCA"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_scaled

"""#### Performing the PCA itself

"""

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

"""#### Creating a new DataFrame with reduced dimensions

"""

df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])

df_pca.head()

"""## K-Means Clustering

#### Determining the optimal number of clusters using the Elbow method
"""

inertia = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

inertia

"""#### Plotting the Elbow curve"""

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Curve')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.xticks(range(1, 11))
plt.show()

"""We can see from the elbow curve that the optimum number of clusters is five clusters

#### Performing the K-Means clustering
"""

num_clusters = 5
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
df_pca['Cluster'] = kmeans.fit_predict(X_scaled)

"""## Visualizing the clusters done

#### Visualizing the clusters using a scatter plot
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='PC1', y='PC2', hue='Cluster', data=df_pca, palette='Set1')
plt.title('Customer Segmentation')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.show()

"""## Key Findings and Insights

**Customer Segmentation:** The clustering analysis revealed distinct customer segments based on purchasing behavior. Each segment represents a different type of customer, such as high spenders, occasional shoppers, and low-value customers.

**Geographical Variation:** Different customer segments could be more prevalent in certain countries(The United Kingdom in our example). Tailoring marketing strategies to specific regions might yield better results.

**High-Value Customers:** One cluster might represent high-value customers who make frequent purchases and contribute significantly to the overall revenue. This segment could be targeted for loyalty programs to enhance customer retention.

## Next Steps

**Fine-Tuning Clustering Algorithms:** Experimenting with different clustering algorithms beyond K-Means, such as hierarchical clustering or DBSCAN would be a good idea as well as comparing their performance and seeing if different algorithms yield more meaningful clusters than the ones we already have
"""